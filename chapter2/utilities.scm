(define (accumulate proc initial sequence)
    (if (null? sequence)
        initial
        (proc (car sequence)
              (accumulate proc initial (cdr sequence))
        )
    )
)

(define (fringe l)
    (cond ((null? l) '())
          ((not (pair? l)) (cons l '()))
          (else (append (fringe (car l)) (fringe (cdr l))))
    )
)

(define (accumulate-n proc init seqs)
    (if (null? (car seqs))
        '()
        (cons (accumulate proc init (map car seqs))
              (accumulate-n proc init (map cdr seqs))
        )
    )
)

(define (enumerate-interval low high)
    (if (> low high)
        '()
        (cons low (enumerate-interval (+ low 1) high))
    )
)

(define (flatmap proc seq)
    (accumulate append '() (map proc seq))
)

(define (debug-print val)
    (display "------")
    (newline)
    (display val)
    (newline)
    (display "------")
    (newline)
)
