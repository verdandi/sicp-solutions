(define (make-mobile left right)
    (list left right)
)

(define (make-branch len structure)
    (cons len structure)
)

(define (left-branch mobile)
    (car mobile)
)

(define (right-branch mobile)
    (car (cdr mobile))
)

(define (branch-length branch)
    (car branch)
)

(define (branch-structure branch)
    (cdr branch))
)

(define (branch-weight branch)
    (let ((s (branch-structure branch)))
        (if (not (pair? s))
            s
            (+ (branch-weight (left-branch s))
               (branch-weight (right-branch s)))
        )
    )
)

(define (total-weight mobile)
    (cond ((null? mobile) 0)
          (else (+ (branch-weight (left-branch mobile))
                   (branch-weight (right-branch mobile))))
    )
)

(define (balanced? mobile)
    (define (branch-torque branch)
        (* (branch-length branch) (branch-weight branch))
    )

    (cond ((null? mobile) #t)
          ((not (pair? mobile)) #t)
          (else (let ((left-torque (branch-torque (left-branch mobile)))
                     (right-torque (branch-torque (right-branch mobile)))
                     (left-structure (branch-structure (left-branch mobile)))
                     (right-structure (branch-structure (right-branch mobile))))
                    (and (= left-torque right-torque)
                         (balanced? left-structure)
                         (balanced? right-structure))
                )
          )
    )
)
